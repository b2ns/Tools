priority -40

############
#  COMMON  #
############

# The smart snippets use a global options called
# "g:ultisnips_javascript.{option}" which can control the format
# of trailing semicolon, space before function paren, etc.
#
# e.g.
# let g:ultisnips_javascript = {
#      \ 'keyword-spacing': 'always',
#      \ 'semi': 'never',
#      \ 'space-before-function-paren': 'always',
#      \ }


global !p
from javascript_snippets import (
  semi, space_before_function_paren, keyword_spacing
)
endglobal

#######################  控制  #######################
snippet if "if ..." i
if ($1) {
	$2
}$0
endsnippet

snippet el "else ..." w
else {
	$1
}$0
endsnippet

snippet ife "if ... else ..." i
if ($1) {
	$2
} else {
	$3
}$0
endsnippet

snippet eli "else ... if ..." i
else if ($1) {
	$2
}$0
endsnippet

snippet ?: "(cond)?true:false" i
($1) ? $2 : $3;$0
endsnippet

snippet swi "switch ... case ..." i
switch ($1) {
	case 1$2:
		$3
		break;
	default:
		break;$4
}$0
endsnippet

snippet for "for loop" i
for (let i = 0$1; i < 5$2; i++$3) {
	$4
}$0
endsnippet

snippet whi "while loop" i
while ($1) {
	$2
}$0
endsnippet

#######################  函数  #######################
snippet fn "匿名函数" i
function () {
	$1
}$0
endsnippet

snippet fn, "匿名函数," i
function () {
	$1
},$0
endsnippet

snippet fn; "匿名函数;" i
function () {
	$1
};$0
endsnippet

snippet fnc "带参数函数" i
function $1($2) {
	$3
}$0
endsnippet

snippet fnc, "带参数函数," i
function $1($2) {
	$3
},$0
endsnippet

snippet fnc; "带参数函数;" i
function $1($2) {
	$3
};$0
endsnippet

snippet fnp "自执行函数包装" i
(function () {
	$1
})();
endsnippet

#######################  输入输出  #######################
snippet log "控制台log输出" i
console.log($1);$0
endsnippet

snippet dir "控制台dir输出" i
console.dir($1);$0
endsnippet

snippet hel "hello world" i
console.log('hello world');$0
endsnippet

#######################  ES6  #######################
snippet imp "import from ;" i
import $1 from '$2';$0
endsnippet

snippet exp "export ;" i
export {$1};$0
endsnippet

snippet expd "export default ;" i
export default $1;$0
endsnippet

snippet == "(res) => {}" i
($1) => {
	$2
}$0
endsnippet

snippet >> "(res) => " i
($1) => $0
endsnippet

snippet cl "class ..." i
class $1 {
	constructor($2) {
	}
}$0
endsnippet

snippet ex "class extends" i
class $1 extends $2 {
	constructor($3) {
		super($4);
	}
}$0
endsnippet

snippet cons "constructor" i
constructor$0
endsnippet

#######################  React  #######################
snippet react.ref "React.createRef();" i
React.createRef();$0
endsnippet

snippet react.fra "React.Fragment" i
<React.Fragment>
	$1
</React.Fragment>$0
endsnippet

snippet react.fra "React.Suspend" i
<React.Suspend fallback="loading...">
	$1
</React.Suspend>$0
endsnippet

snippet reactdom.rend "ReactDOM.render" i
ReactDOM.render(
	<App />$1
	,document.getElementById('root')$2);$0
endsnippet

snippet reactdom.hy "ReactDOM.hydrate" i
ReactDOM.hydrate(
	$1
	,$2);$0
endsnippet

snippet reactdom.por "ReactDOM.createPortal" i
ReactDOM.createPortal(
	$1
	,$2);$0
endsnippet

snippet reactdom.find "ReactDOM.findDOMNode" i
ReactDOM.findDOMNode($1);$0
endsnippet

snippet reactdom.unmount "ReactDOM.unmountComponentAtNode" i
ReactDOM.unmountComponentAtNode($1);$0
endsnippet

snippet react.comp "component class" i
class $1 extends React.Component{
	constructor(props) {
		super(props);
	}
	render() {
		return (
			$2
		);
	}
}$0
endsnippet

snippet react.set "this.setState" i
this.setState($1);$0
endsnippet

snippet react.didm "componentDidMount" i
componentDidMount() {
	$1
}$0
endsnippet

snippet react.willum "componentWillUnmount" i
componentWillUnmount() {
	$1
}$0
endsnippet

snippet react.getd "getDerivedStateFromProps" i
static getDerivedStateFromProps(nextProps,prevState) {
	$1
}$0
endsnippet

snippet react.gets "getSnapshotBeforeUpdate" i
getSnapshotBeforeUpdate(prevProps,prevState) {
	$1
}$0
endsnippet

snippet react.sho "shouldComponentUpdate" i
shouldComponentUpdate(nextProps,nextState) {
	$1
}$0
endsnippet

snippet react.didup "componentDidUpdate" i
componentDidUpdate() {
	$1
}$0
endsnippet

snippet react.getd "getDerivedStateFromError" i
static getDerivedStateFromError(error) {
	$1
}$0
endsnippet

snippet react.didc "componentDidCatch" i
componentDidCatch(error,info) {
	$1
}$0
endsnippet

#######################  Node.js  #######################
snippet req "const x = require('x');" i
const $1 = require('$1');$0
endsnippet

snippet fs "" i
const fs = require('fs');$0
endsnippet

snippet http "" i
const http = require('http');$0
endsnippet

snippet net "" i
const net = require('net');$0
endsnippet

snippet path "" i
const path = require('path');$0
endsnippet

snippet url "" i
const url = require('url');$0
endsnippet

snippet querystring "" i
const qs = require('querystring');$0
endsnippet

snippet util "" i
const util = require('util');$0
endsnippet

snippet events "" i
const Emitter = require('events').EventEmitter;$0
endsnippet

snippet child "" i
const child_process = require('child_process');$0
endsnippet

#######################  小程序  #######################
snippet setd "this.setData({});" i
this.setData({
	$1
});$0
endsnippet

#######################  其他  #######################
snippet use "use strict"
'use strict';
endsnippet

snippet timeout "setTimeout" i
setTimeout(() => {
	$1
}, 2000);
endsnippet

# vim:ft=snippets:
